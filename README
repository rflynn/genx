# ex: set ff=dos ts=2 et:
# $Id$
 o=O   
0===0  
0===0  README
 O=o   ----------------------------------------------------------------------
  O    
 o=O   For the impatient:
0===0   git clone git://github.com/pizza/genx.git ~/genx && cd ~/genx/src && make && ./genx
0===0   sudo renice +19 $(pgrep genx)
 O=o   
  O    
 o=O   genx generates functions in x86 machine language via a genetic 
0===0  algorithm.
0===0  
 O=o   It produces genes consisting of random machine language.
  O    These genes are fed input and their output is compared to a target;
 o=O   for each generation of genes those most closely matching the target
0===0  output are kept and used to populate the next generation.
0===0  
 O=o   Eventually the gene converges upon a function that maps accurately
  O    between the target input and output.
 o=O   
0===0  
0===0  Why is this interesting?
 O=o   ----------------------------------------------------------------------
  O    
 o=O   Discover Unknown Functions/Relationships
0===0   You can feed the program data whose statistical relationship is
0===0   unknown and it can search for relationships in an automated
 O=o    fashion.
  O    
 o=O   Automated Optimization
0===0   Find shorter and more efficient methods of known functions.
0===0   
 O=o   It's Fast
  O     Because the functions are expressed in native x86 they can be
 o=O    executed by the CPU directly, allowing even a very modest desktop
0===0   computer to try many millions of combinations per minute.
0===0  
 O=o   
  O    Further Information
 o=O   ----------------------------------------------------------------------
0===0  
0===0  INSTALL.txt <- Figure out how to use it
 O=o      TODO.txt <- Help out
  O    LICENSE.txt <- Concerning distribution
 o=O   
0===0  
0===0  
 O=o   
  O    
 o=O   
0===0  
0===0  

