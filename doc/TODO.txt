# ex: set ff=dos ts=2 et:
# $Id$

TODO
-----------------------------------------------------------------------------


 * fix score() bug!!!!

   the results of score() diff depending on who runs it(!)

   this occurs sometimes but not always, and is almost certainly the fault
   of the inline asm in the shim functions.

 * add support for the saving/retrieval of jobs, which will allow tasks to be
   resumed if the program crashes, and would even allow the transfer of jobs
   between machines.

    * add support for some sort of cool visualization output, even if it's silly
      people are much more likely to be interested if we can at least show them
      that something is happening

      - this would probably be a component separate from the actual crunching
      - once we keep some sort of parseable output log we can write a little
        gui applet that reads them and displays visualizations of the
          - target function/data
          - best known candidate
          - a random sampling of candidates from the most recent generations

        this shouldn't be too hard, too CPU-intensive or too complex, but
        it will get people more excited about using it.

 * fairly simple optimization
  
   when scoring a candidate, if score == WORST_POSSIBLE, then don't even
   bother incrementing the index; write the contents of subseqent genotypes
   in the same place, unless one scores better than the WORST_POSSIBLE.
   in the case that no candidate genotype scores better than WORST then
   we adopt the last candidate (though this won't exactly work if GEN_KEEP > 1...
   so we should loop at least GEN_KEEP - 1 candidate before this optimization).
   in any other case we wish to retain better scores and we discard WORST
   scores anyways.
   this takes advantage of CPU cache and should be significantly faster.

 * implement proper looping.
  
   so far the only sort of branching we have are conditional moves
   (CMOV* instructions); which provide little variability.

   generating sane code with jumps in it can be complicated, so let's
   take it one step at a time:

   - first, allow JUMPs, but only forwards. this implements branching,
     but not looping.

   - next, see if we can implement the LOOPcc 
 
 * currently the shim function works on x86-64 but the generated code
   crashes; there is something fundamentally incompatible with the function
   prefix and/or suffix, but I don't yet know what it is.

   - get some objdump -D output from an x86-64 binary and see what's different

   - if x86-64 support can be added by just changing a few instructions
     and/or prefix/suffix, then do it; if it requires a whole new path
     for generation, then I probably won't do it immediately.

 * modify mutation to account to separately consider function and parameter
   for example, given an
  (+ 0x01234567) operation, maybe just mutate the number, or part
  of the number. or maybe modify the operation but leave the number.

   try mutation of just a single instruction at a time, see if we get better
   results; I thought 

 * implement some basic guidance for the function generation:

    * create an enumeration of all possible data storage destinations

    * for each instruction in X86 record which place is read and written

    * while calculating a single function, maintain a running tally of which
      places have been written to, and only choose from the pool of possible
      functions which reads operates from one of those places.

    this will increase the cost of generating a single function, but i believe
    it will produce output of higher quality, and thus reduce the overall time
    wasted on functions which are complete garbage.

 * implement worker threads

   this application is embarassingly parallel; allow for a configurable
   number of worker threads to be launched for the purpose of mutating and
   evaluating genotypes.

   note that it's much more important to work smarter than faster; so improve
   the algorithms before you do this(!)

 * implement a "simplify" function. this would identify effectless or redundant
   operations, such as performing some operations more than once in a row, and
   reduce them to canonical, equivalent operations
   
     hmm not so sure about this anymore, the overhead for doing it in every
     function would be far too great; but perhaps we could still apply it to
     our results


